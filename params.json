{"name":"PlayerHater","tagline":"A wrapper for the StageFright player on Android. Hate the player, not the game.","body":"## What's this?\r\n\r\nPlayerHater is an Android library for playing audio in the background of your app. You can use it for:\r\n\r\n* Podcasts!\r\n* Music!\r\n* Radio!\r\n\r\nYou probably shouldn't use it for:\r\n\r\n* Fart sounds\r\n* Game sound effects\r\n\r\nThere's a whole lot that PlayerHater does for you right out of the box and you can add your own functionality through the use of plugins. PlayerHater even ships with plugins that will do the following automatically:\r\n\r\n* Show a regular notification on on Android 2.3 or lower, a notification with player controls on Android 3.0+, and an expandable notification on Android 4.2+!\r\n* Handle audio focus changes in all of the weird and different ways for pre-2.2 and post-2.2 versions!\r\n* Add lock screen controls on Android 4.0+!\r\n* Pebble support!\r\n\r\nAll of this is configurable if you like, and you can write your own plugins to run alongside these.\r\n\r\nBut the best thing about PlayerHater is that there are no ServiceConnection callbacks, MediaPlayer state diagrams, or setup and teardown code for you to write. It's all taken care of in the library.\r\n\r\n## Quick Start\r\n\r\n### Important, temporary information\r\n\r\n    Everything's going into Maven Central soon using the new aar format\r\n    that's part of the new Android build system that uses Gradle. If\r\n    you're not comfortable using the sonatpe OSS snapshot server (or if\r\n    you don't know what that is) or you haven't moved to Gradle yet, you\r\n    can check out the project repository and use the files in \r\n\r\n    legacyLibraryProject/PlayerHater\r\n\r\n    as if they were a normal android library project. They are, in fact\r\n    symlinks.\r\n\r\n    Note that doing this will require you to add entries to your\r\n    AndroidManifest.xml file, while the new build system allows us to\r\n    automatically do this for you if you're using Gradle.\r\n\r\nOnce you've imported the project into your android application and added the `Service` and `BroadcastReceiver` to your `AndroidManifest.xml` file, getting a handle on the player is as easy as:\r\n\r\n```java\r\nimport org.prx.android.playerhater.PlayerHater;\r\n\r\nclass MyApplicationActivity extends Activity {\r\n\r\n\tprivate PlayerHater mPlayerHater;\r\n\r\n\t@Override\r\n\tpublic void onResume(Bundle savedInstanceState) {\r\n\t\tsuper.onResume(savedInstanceState);\r\n\t\tmPlayerHater = PlayerHater.bind(this);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onPause() {\r\n\t\tmPlayerHater.release();\r\n\t}\r\n\r\n}\r\n```\r\n\r\nWhen you've bound to a `PlayerHater`, you're ready to start playing stuff - music, podcasts, or whatever new thing the kids are listening to these days.\r\n\r\n### The PlayerHater API\r\n\r\n\t\tabstract void\temptyQueue()\r\n\t\tRemoves all songs from the queue.\r\n\t\tabstract int\tenqueue(Song song)\r\n\t\tPuts a song on the end of the play queue.\r\n\t\tabstract int\tgetCurrentPosition()\r\n\t\tGets the location of the playhead in milliseconds.\r\n\t\tabstract int\tgetDuration()\r\n\t\tGets the duration of the currently loaded Song in milliseconds.\r\n\t\tabstract int\tgetQueueLength()\r\n\t\tReturns the number of items in the queue.\r\n\t\tabstract int\tgetQueuePosition()\r\n\t\tReturns the number of clips in the queue which are at least partially behind the playhead.\r\n\t\tabstract int\tgetState()\r\n\t\tGets the state of the PlayerHater, represented as an int.\r\n\t\tabstract boolean\tisLoading()\r\n\t\tChecks to see if the player is currently loading audio.\r\n\t\tabstract boolean\tisPlaying()\r\n\t\tChecks to see if the player is currently playing back audio.\r\n\t\tabstract Song\tnowPlaying()\r\n\t\tGets the Song representation of the track that is currently loaded in the player.\r\n\t\tabstract boolean\tpause()\r\n\t\tPauses the player.\r\n\t\tabstract boolean\tplay(Song song, int startTime)\r\n\t\tBegins playback of song at startTime\r\n\t\tabstract boolean\tplay(Song song)\r\n\t\tBegins playback of a song at the beginning.\r\n\t\tabstract boolean\tplay(int startTime)\r\n\t\tBegins playback of the currently loaded Song at startTime in the track.\r\n\t\tabstract boolean\tplay()\r\n\t\tBegins playback of the currently loaded Song.\r\n\t\tabstract boolean\tremoveFromQueue(int position)\r\n\t\tRemoves the element at position from the play queue.\r\n\t\tabstract boolean\tseekTo(int startTime)\r\n\t\tMoves the playhead to startTime\r\n\t\tabstract void\tsetPendingIntent(PendingIntent intent)\r\n\t\tSets the intent to be used by the plugins.\r\n\t\tabstract void\tsetTransportControlFlags(int transportControlFlags)\r\n\t\tSets the visible buttons for plugins.\r\n\t\tabstract void\tskip()\r\n\t\tMoves to the next song in the play queue.\r\n\t\tabstract void\tskipBack()\r\n\t\tMoves back in the play queue.\r\n\t\tabstract boolean\tskipTo(int position)\r\n\t\tMoves to a new position in the play queue.\r\n\t\tabstract boolean stop()\r\n\t\tStops the player.\r\n\r\n## Changelog\r\n\r\n### v0.3.0\r\n\r\nWe refactored everything to make more sense and run faster. Large parts of the codebase have been written from scratch using knowledge we gained in versions 0.1.0 and 0.2.0 and many class and method names have been changed to make more sense.\r\n\r\n0.3.0 is a breaking upgrade from 0.2.0 and is still considered beta software until a 1.0.0 release.\r\n\r\n#### Highlights\r\n\r\n* The Service is now aggressively bound whenever you are interacting with PlayerHater. It's still released when appropriate so that Android can GC the process automatically and it will not show up in the Android Running Services list.\r\n\r\n* getState() will now return one of `PlayerHater.IDLE`, `PlayerHater.PLAYING`, `PlayerHater.LOADING`, or `PlayerHater.PAUSED` instead of one of the lower-level MediaPlayer states.\r\n\r\n* `public Bundle getExtra()` and `public String getAlbumTitle()` have been added to the `Song` interface. `void onAlbumTitleChanged(String albumTitle)` has been added to the `PlayerHaterPlugin` interface.\r\n\r\n* `void onServiceStarted(IPlayerHaterBinder binder)` has been removed from the `PlayerHaterPlugin` interface. If you need access to Service-only methods, check to see if the `PlayerHater` passed to `onPlayerHaterLoaded()` is a `ServicePlayerHater`, cast, and then call the methods needed.\r\n\r\n* Song data is loaded just in time, even across the IPC boundary. This means that if you enqueue a `Song` and then the return values for the various Song methods change, those changes will be propagated. Please note that if your Activity-side application is terminated the Song data will be serialized at that moment and passed across the barier to permit garbage collection.\r\n\r\n### v0.2.0\r\n\r\n* No service callbacks to deal with - Service is automatically started as needed when `play()` is called. You can immediately work with PlayerHater and all commands sent to it will be forwarded to the Service once it is started.\r\n\r\n* It is no longer the developer's responsibility to remember when to and when not to stop the service.\r\n\r\n* The service is now runnable on a separate Android process through the use of AIDL IPC.\r\n\r\n* Too many changes to enumerate. Refer to documentation.\r\n\r\n0.2.0 is a breaking upgrade from 0.1.0 and is still considered beta software until a 1.0.0 release.\r\n\r\nLicense\r\n-------\r\n\r\n    Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\r\n     \r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n    \r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n    \r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}